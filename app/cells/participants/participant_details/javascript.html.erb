
<%= render_cell "sociable", :javascript %>
<%= render_cell "contactable", :javascript %>

<script type="text/javascript">

ParticipantApp = new Backbone.Marionette.Application();

ParticipantApp.PeopleManagement = (function(Backbone){
    var eventAggregator = AppUtils.eventAggregator;
    var selectCallbacks = $.Callbacks();

    var MergePeopleForm = Backbone.Form.extend({
        schema : {
            src_person_id : { type : 'Hidden' },
            dest_person_id : { type : 'Hidden' },
            src_person_name : { type : 'Text', title : '', editorAttrs: { readonly: true },
                                   hint: '<%= (t "merge-src-person-hint").html_safe %>' },
            direction : { title : '<%= t "merge-direction" %>',
                          type : 'StyledCheckbox',
                          unchecked_icon : "fa fa-fw fa-arrow-down",
                          checked_icon : "fa fa-fw fa-arrow-up"
                        },
            dest_person_name : { type : 'Text', title : '', editorAttrs: { readonly: true },
                        hint:  '<%= (t "merge-src-person-hint").html_safe %>' }
        }
    });


    var registrationTypes = new Bloodhound({
      datumTokenizer: Bloodhound.tokenizers.obj.whitespace, //('value'),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      remote: {
        url: '<%= baseUri + '/registration_details/registration_types/%QUERY' %>',
        wildcard: '%QUERY'
      }
    });

    RegistrationDetail = Backbone.Model.extend({
        schema : {
            registered : { type : 'Checkbox', title : '<%= t "registered" %>' , help: '<%= t "registered-hint" %>', help_placement: 'auto right',},
            registration_number : { 
                type : 'DependentText', title : '<%= t "reg-number" %>',
                dependsOn : 'registered', dependentValues : ['true'], 
                help: '<%= t "registration-number-hint" %>',
                help_placement: 'auto right',
            },
            registration_type : { 
                type : 'DependentTypeAheadText',
                dependsOn : 'registered', dependentValues : ['true'], 
                title : '<%= t "reg-type" %>',
                help: '<%= t "registeration-type-hint" %>',
                config : {
                    minLength: 0,
                    limit: 10,
                    source: registrationTypes
                }
            },
            
            can_share : { type : 'Checkbox', title : '<%= t "can-share-details" %>', help: '<%= t "can-share-details-hint" %>' }
        },
        urlRoot: "<%= baseUri + '/registrationDetails' %>"
    });

    //
    Pseudonym = Backbone.Model.extend({
        schema : {
            prefix  : { type : 'Text', title : '<%= t "prefix" %>'},
            first_name  : { type : 'Text', title : '<%= t "first-name" %>'},
            last_name  : { type : 'Text', title : '<%= t "last-name" %>'},
            suffix  : { type : 'Text', title : '<%= t "suffix" %>'},
        }
    });

    InviteDetails = Backbone.DeepModel.extend({
        schema : {
            prefix  : { type : 'Text', title : '<%= t "prefix" %>', editorAttrs : { placeholder : '<%= t "prefix" %>' }},
            first_name : { type : 'Text', title : '<%= t "first-name" %>', editorAttrs : { placeholder : '<%= t "first-name" %>' } },
            last_name : { type : 'Text', title : '<%= t "last-name" %>', editorAttrs : { placeholder : '<%= t "last-name" %>' }, validators: ['required'] },
            suffix : { type : 'Text', title : '<%= t "suffix" %>', editorAttrs : { placeholder : '<%= t "suffix" %>' } },
            has_pseudonym : {
                type: 'Checkbox'
            },
            'pseudonym.prefix' : { type : 'DependentText', 
                                    title : '<%= t "prefix" %>', 
                                    dependsOn : 'has_pseudonym', dependentValues : ['true'], 
                                    editorAttrs : { placeholder : '<%= t "prefix" %>' } },
            'pseudonym.first_name' : { type : 'DependentText', 
                                        title : '<%= t "pub-first-name" %>', 
                                        dependsOn : 'has_pseudonym', dependentValues : ['true'], 
                                        editorAttrs : { placeholder : '<%= t "pub-first-name" %>' } },
            'pseudonym.last_name' : { type : 'DependentText', 
                                        title : '<%= t "pub-last-name" %>', 
                                        dependsOn : 'has_pseudonym', dependentValues : ['true'], 
                                        editorAttrs : { placeholder : '<%= t "pub-last-name" %>' } },
            'pseudonym.suffix' : { type : 'DependentText', 
                                        title : '<%= t "pub-suffix" %>', 
                                        dependsOn : 'has_pseudonym', dependentValues : ['true'], 
                                        editorAttrs : { placeholder : '<%= t "suffix" %>' } },
            'company' : { type : 'Text', title : '<%= t "company" %>', editorAttrs : { placeholder : '<%= t "company" %>' } },
            'job_title' : { type : 'Text', title : '<%= t "job-title" %>', editorAttrs : { placeholder : '<%= t "job-title" %>' } },
            'comments' : { type : 'TextArea', title : '<%= t "comments" %>', editorAttrs : { placeholder : '<%= t "comments-placeholder" %>' } },
            invitestatus_id : { type : 'Select', title : '<%= t "invitation-status" %>', options : <%= InviteStatus.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
            acceptance_status_id : { type : 'Select', title : '<%= t "acceptance-status" %>', options : <%= AcceptanceStatus.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
            invitation_category_id : { type : 'Select', title : '<%= t "invitation-category" %>', options : <%= [[' ',' ']].concat(InvitationCategory.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> }
        },
        defaults: {
            invitestatus_id : <%= InviteStatus['Not Set'].id %>,
            acceptance_status_id : <%= AcceptanceStatus['Unknown'].id %>
        },
        urlRoot : "<%= baseUri + '/participants' %>"
    });
    
    //
    BioDetails = Backbone.Model.extend({
        schema : $.extend(
            {
                survey_bio : { type : 'TextArea', title : '<%= t "bio-from-survey" %>', editorAttrs: { readonly : true, rows : 6, cols : 60 } },
                bio : { 
                  type : 'Html', 
                  title : '<%= t "bio" %>', 
                  editorAttrs: { rows : 6, cols : 60 },
                }
            }, 
            Sociable.generateSchema(
                "facebook", "twitterinfo", "linkedin", "youtube", "twitch", 
                "instagram", "flickr", "reddit", "othersocialmedia", "website"
            )
        ),
        urlRoot : "<%= baseUri + '/edited_bios' %>"
    });

    BioPicture = Backbone.Model.extend({
        schema : {
            bio_picture : { type : 'CloudImage',
                title : '<%= (I18n.t "bio-image").html_safe %>',
                help: '<%= (I18n.t "bio-image-upload-help").html_safe %>',
                help_placement: 'bottom' ,
                validators: [{
                    type: 'required',
                    message: '<%= I18n.t("you-have-not-uploaded-an-image") %>'
                }],
                cl_args : {
                          client_allowed_formats: ["png","gif","jpeg","jpg"],
                          max_file_size: (3.5 * 1024 * 1024), // 3.5Mb
                          cropping_aspect_ratio: 1.0,
                          button_caption: '<%= I18n.t("upload-bio-image") %>'
                }
            }
        },
        urlRoot : "<%= baseUri + '/bio_images' %>"
    });

    //
    ProgramItem = Backbone.DeepModel.extend({
    });
    ProgramItemCollection = Backbone.Collection.extend({
        model : ProgramItem
    });

    //
    TagContext = Backbone.Model.extend({
    });
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });

    //
    TagFilter = Backbone.Model.extend({
        // Context name & Tag name
        // no ids cause no sync with backend
    });
    TagFilterCollection = Backbone.Collection.extend({
        model : TagFilter
    });

    //
    AvailabilityDateModel = Backbone.RelationalModel.extend({
        schema : {
            start_time : { type : 'Datetime', title : '<%= t "item-start-time" %>', help: '<%= t "availability-start-time-hint" %>',
                    tz_offset : <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/60 %>,
                    picker : {
                        locale : "<%= I18n.locale %>",
                        stepping : 15,
                        format : "DD MMM YYYY, HH:mm",
                        useCurrent: false,
                        minDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                        maxDate : "<%= (Time.zone.parse(@start_date.start_date.to_s) + ((@start_date.number_of_days).to_i).days).strftime('%m/%d/%Y') %>",
                        defaultDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>"
                } },
            end_time : { type : 'Datetime', title : '<%= t "item-end-time" %>', help: '<%= t "availability-end-time-hint" %>',
                    tz_offset : <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/60 %>,
                    picker : {
                        locale : "<%= I18n.locale %>",
                        stepping : 15,
                        format : "DD MMM YYYY, HH:mm",
                        useCurrent: false,
                        minDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                        maxDate : "<%= (Time.zone.parse(@start_date.start_date.to_s) + ((@start_date.number_of_days).to_i).days).strftime('%m/%d/%Y') %>",
                        defaultDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>"
                } }
        },
        urlRoot : "<%= baseUri + '/available_dates' %>"
    });
    ExcludedItemModel = Backbone.RelationalModel.extend({});
    ExcludedItemCollection = Backbone.Collection.extend({
        model : ExcludedItemModel
    });
    ExcludedTimesModel = Backbone.RelationalModel.extend({
    });
    ExcludedTimesCollection = Backbone.Collection.extend({
        model : ExcludedTimesModel
    });
    Exclusions = Backbone.RelationalModel.extend({
        relations: [{
            type: Backbone.HasMany,
            key: 'items',
            relatedModel: 'ExcludedItemModel',
            collectionType : 'ExcludedItemCollection',
        }, {
            type: Backbone.HasMany,
            key: 'times',
            relatedModel: 'ExcludedTimesModel',
            collectionType : 'ExcludedTimesCollection',
        }
        ]
    });
    /******************************************************
     *
     */
    PersonTabLayout = Backbone.Marionette.Layout.extend({
        template : "#person-tab-layout-template",

        regions : {
            registration    : "#registration-tab",
            contacts        : "#contacts-tab",
            published_info  : "#published-info-tab",
            invite          : "#invite-tab",
            bio             : "#bio-tab",
            bio_image       : "#bio-image",
            tags            : "#tags-tab",
            availability    : "#availability-div",
            exclusion_items : "#exclusion-items-div",
            exclusion_times : "#exclusion-times-div",
            items           : "#items-tab"
        }
    });

    SummaryLayout = Backbone.Marionette.Layout.extend({
        template: "#summary-layout-template",

        regions : {
            identity    : "#id-region-div",
            registration: "#reg-region-div"
        },
    });

    PublishedInfoLayout = Backbone.Marionette.Layout.extend({
        template: "#published-info-layout-template",

        regions : {
            picture : "#picture-region-div",
            bio     : "#bio-region-div"
        },
    });

    var tabContent = {};
    var filters = null;
    var personTabLayout = null;

    function clearRegDetails() {
        $('#selected-participant').text("");

        if (personTabLayout) {
            // personTabLayout.close();

            // personTabLayout = new PersonTabLayout();
            // personTabLayout.render();
            // $('#item-tabs').html(personTabLayout.el);

            personTabLayout.registration.close();
            personTabLayout.contacts.close();
            personTabLayout.published_info.close();
            personTabLayout.invite.close();
            personTabLayout.bio.close();
            personTabLayout.bio_image.close();
            personTabLayout.tags.close();
            personTabLayout.availability.close();
            personTabLayout.exclusion_items.close();
            personTabLayout.exclusion_times.close();
            personTabLayout.items.close();
        };

        Backbone.Relational.store.reset();

        eventAggregator.off("refreshTagList", syncModel);
    };

    function syncModel() {
        this.fetch({async : false});
    };

    function getPersonName(data) {
        var res = "";

        if (typeof data['person[pseudonym_attributes][prefix]'] != 'undefined') {
            if (data['person[pseudonym_attributes][prefix]']) {
                res += data['person[pseudonym_attributes][prefix]'];
            };
        };
        if (typeof data['person[pseudonym_attributes][first_name]'] != 'undefined') {
            if (res.length > 0) {
                res += ' ';
            };
            if (data['person[pseudonym_attributes][first_name]']) {
                res += data['person[pseudonym_attributes][first_name]'];
            };
        };
        if (typeof data['person[pseudonym_attributes][last_name]'] != 'undefined') {
            if (data['person[pseudonym_attributes][last_name]']) {
                if (res.length > 0) {
                    res += ' ';
                };
                res += data['person[pseudonym_attributes][last_name]'];
            };
        };
        if (typeof data['person[pseudonym_attributes][suffix]'] != 'undefined') {
            if (data['person[pseudonym_attributes][suffix]']) {
                if (res.length > 0) {
                    res += ' ';
                };
                res += data['person[pseudonym_attributes][suffix]'];
            };
        };

        var name = (data['person[prefix]'] + ' ' + data['person[first_name]'] + ' ' + data['person[last_name]'] + ' ' + data['person[suffix]']).trim();

        if (res.length > 0) {
            if (name.length > 0) {
                res += " (" +  name + ")";
            }
        } else {
            res = name;
        };

        return res;
    };

    function instantiate_area(id, object_type, url) {
        var obj = new object_type();

        obj.deferred = obj.fetch({
            url : url,
            async: true,
        });

        return obj;
    };

    function showRegDetails(id) {
        var data = jQuery("#participants").jqGrid('getRowData', id);
        $('#selected-participant').text(getPersonName(data));

        summaryLayout = new SummaryLayout();
        personTabLayout.invite.show(summaryLayout);

        SurveyReviewApp.Reviews.showSurveySelector(id);

        jQuery("#mail-history").mailHistoryBootstrapTable('personHistory',{
            person_id : id
        });

        var reg_details = instantiate_area(id, RegistrationDetail, "<%= baseUri + '/participants/' %>" + id + "/registrationDetails.json");
        reg_details.deferred.done(function() {
            TabUtils.createTabContent({
                model : reg_details,
                template : '#registration-view-template',
                region : summaryLayout.registration,
                id : id,
                id_name : 'person_id',
                newTitle : '<%= t "create-registration" %>',
                editTitle : '<%= t "edit-registration" %>',
                deleteTitle : '<%= I18n.t "delete-confirmation" %> ',
                deleteMessage : '<%= (I18n.t "confirm-that-you-really-want-to-delete").html_safe %>'
            });
        });

        var invite_details = instantiate_area(id, InviteDetails, "<%= baseUri + '/participants/' %>" + id + ".json");
        invite_details.deferred.done(function() {
            TabUtils.createTabContent({
                model : invite_details,
                modal_template : "#person-form-template",
                template : '#invite-view-template',
                region : summaryLayout.identity,
                id : id,
                id_name : 'person_id',
                newTitle : '<%= t "create-invite" %>',
                editTitle : '<%= t "edit-invite" %>',
                updateCallback : function(mdl, response, opts) {
                                $("#participants").jqGrid('setGridParam', {
                                    loadComplete: function(data) {
                                        $("#participants").jqGrid('setSelection', id, false); // when load is complete the selection is called...
                                        $(this).jqGrid('setGridParam', { loadComplete: function() {} });
                                    }
                                });
                                $("#participants").trigger("reloadGrid");
                            },
                events : {
                    'click .model-generate-invite-key-button' : function() {
                        mdl = this.model;
                        $.ajax({
                            url : "<%= baseUri + '/participants/generateInviteKey/' %>" + id + ".json",
                            success : function() {
                                mdl.fetch();
                            }
                        })
                    }
                }
            });

            selectCallbacks.fire({
                id : id,
                model : invite_details
            });
        });

        publishedInfoLayout = new PublishedInfoLayout();
        personTabLayout.published_info.show(publishedInfoLayout);

        publishedInfoLayout.$("#share-profile-btn").attr("href", ("#share_profile/" + id)); // set the selected id for the share profile modal

        var bio_details = instantiate_area(id, BioDetails, "<%= baseUri + '/participants/' %>" + id + "/edited_bios.json");
        bio_details.deferred.done(function() {
            TabUtils.createTabContent({
                model : bio_details,
                template : '#bio-view-template',
                region : publishedInfoLayout.bio,
                id : id,
                id_name : 'person_id',
                newTitle : '<%= t "create-bio" %>',
                editTitle : '<%= t "edit-bio" %>',
                deleteTitle : '<%= I18n.t "delete-confirmation" %> ',
                deleteMessage : '<%= (I18n.t "confirm-that-you-really-want-to-delete").html_safe %>'
            });
        });

        var bio_pics = instantiate_area(id, BioPicture, "<%= baseUri + '/participants/' %>" + id + "/bio_images.json");
        bio_pics.deferred.done(function() {
            TabUtils.createTabContent({
                model : bio_pics,
                modelType: BioPicture,
                modal_template : "#bio-image-form-template",
                template : '#bio-image-template',
                region : publishedInfoLayout.picture,
                id : id,
                id_name : 'person_id',
                newTitle : '<%= t "create-bio-image" %>',
                editTitle : '<%= t "edit-bio-image" %>',
                deleteTitle : '<%= I18n.t "delete-confirmation" %> ',
                deleteMessage : '<%= (I18n.t "confirm-that-you-really-want-to-delete").html_safe %>'
            });
        });


        TabUtils.createTabListContent({
            collectionType : ProgramItemCollection,
            url : "<%= baseUri + '/participants/' %>" + id + "/programme_items.json",
            template : "#program-item-view-template",
            collection_tagName : 'table class="table table-hover"',
            tagName : 'tr',
            region : personTabLayout.items,
        });

        TabUtils.createTagListContent({
            collectionType : TagContextCollection,
            url : "<%= baseUri + '/tags/' %>" + id + ".json?class=Person",
            tagUrl : "<%= baseUri + '/tags/' %>" + id + "/add?class=Person",
            template : "#tag-context-layout-template",
            region : personTabLayout.tags,
            newTitle : '<%= t "create-tag" %>',
        });

        //
        // get the exclusions and show them within the layout
        //
        var availability = instantiate_area(id, AvailabilityDateModel, "<%= baseUri + '/participants/' %>" + id + '/available_dates.json');
        availability.deferred.done(function() {
            TabUtils.createTabContent({
                model : availability,
                template : '#date-exclusion-view-template',
                region : personTabLayout.availability,
                id : id,
                id_name : 'person_id',
                newTitle : '<%= t "create-availability" %>',
                editTitle : '<%= t "edit-availability" %>',
                deleteTitle : '<%= I18n.t "delete-confirmation" %> ',
                deleteMessage : '<%= (I18n.t "confirm-that-you-really-want-to-delete").html_safe %>'
            });
        });

        exclusions = new Exclusions();
        exclusions.fetch({
            url : "<%= baseUri + '/participants/' %>" + id + "/availabilities.json",
            success : function(obj) {
                TabUtils.createTabListContent({
                    collection : obj.get('items'),
                    template : "#item-exclusion-view-template",
                    region : personTabLayout.exclusion_items
                });
                TabUtils.createTabListContent({
                    collection : obj.get('times'),
                    template : "#time-exclusion-view-template",
                    region : personTabLayout.exclusion_times
                });
            }
        });

        Contactable.renderAddressLayout(personTabLayout.contacts, id, ("<%= baseUri + '/participants/' %>" + id));

        
        eventAggregator.on("refreshTagList", syncModel, invite_details);

        //initialize the popovers
        $(function () {
            $('.bpopover').popover({
                html: true,
                viewport: { selector: 'body', padding: 0 },
                container: 'body',
            })
        });

        return invite_details;
    };

    // Add filter for email
    function create_email_filter() {
        $('#clear-email-filters').click(function(ev) {
           $('#email-filters').val("");
            jQuery("#participants").participantTable('emailQuery', "");
        });
        $('#email-filters').change(function(ev) {
            var val = $(this).val();
            jQuery("#participants").participantTable('emailQuery', val);
        });
    };

    function mergePeople() {
        /*
         * 1. we need to have two selected people, if not show an error dialog
         * 2. we need to show who is selected and allow them so select destination
         * 3. we need an inprogress dialog that will go away when the merge is completed
         *
         * When finished we need to remove the selection and clear the tabs? or select the merged person...
         */
        if (selected_people.length != 2) {
            modal = new AppUtils.InfoModal({
                            content : '<%= t "need-to-select-two-people" %>',
                            title : '<%= t "error" %>'
                    });
            modal.render();
        } else {
            // Show a modal with both people and ask to proceed
            // get the names of the peopel based on the ids - can be extracted from the grid
            // these need to be put in the form
            var data = jQuery("#participants").jqGrid('getRowData', selected_people[0]);
            src_name = getPersonName(data); // add email
            src_name += " (" + data['emails'] + ")"
            data = jQuery("#participants").jqGrid('getRowData', selected_people[1]);
            dest_name = getPersonName(data); // add email
            dest_name += " (" + data['emails'] + ")"

            var modal = new AppUtils.FormModal({
                title: '<%= t "merge-people" %>',
                form: new MergePeopleForm({
                    data : {
                        src_person_id: selected_people[0],
                        src_person_name: src_name,
                        dest_person_id: selected_people[1],
                        dest_person_name: dest_name
                    }
                }),
                endPoint: '<%= baseUri %>/participants/merge',
                refresh : function(data) {
                    person_id = data.person_id;
                    $("#participants").jqGrid('resetSelection');
                    $("#participants").jqGrid('setGridParam', {
                        loadComplete: function(data) {
                            $("#participants").jqGrid('setSelection', person_id, true); // when load is complete the selection is called...
                            $(this).jqGrid('setGridParam', { loadComplete: function() {} });
                        }
                    });
                    $("#participants").trigger("reloadGrid");
                }
            });
            modal.render();
        }
    };

    var filterCol = null;
    var current_person = null;
    var selected_people = [];

    //
    //
    //
    return {
        addSelectCallback : function(func) {
            selectCallbacks.add(func);
        },

        init : function() {
            personTabLayout = new PersonTabLayout();
            personTabLayout.render();
            $('#item-tabs').html(personTabLayout.el);

            TabUtils.createTagCloudContent({
                collectionType : TagContextCollection,
                url : "<%= baseUri + '/tags.json?class=Person' %>",
                template : "#tag-cloud-context-layout-template",
                place : '#participant-tag-cloud',
                collection_attributes : { "class" : "accordion", "id" : "participant-tag-cloud-parent" },
                view_attributes : { "class" : "accordion-group" },
                tagselect : function(context, name) {
                    ParticipantApp.PeopleManagement.addFilter(context, name);
                    ParticipantApp.PeopleManagement.refreshTable();
                },
            });

            create_email_filter();

            $('#participant-tabs').tabdrop({
                text : "..."
            });
        },

        InviteDetails : InviteDetails,

        mergePeople : mergePeople,

        showDetails : function(id, status, e) {
            if (status) {
                var selected_rows = jQuery('#participants').getGridParam('selarrrow');

                if (selected_rows.length == 1) {
                    jQuery("#participants").jqGrid('setSelection',removed);
                    selected_people = [];
                    selected_people.push(id);
                } else {
                    selected_people.push(id);
                    if (selected_people.length > 2) {
                        var removed = selected_people.shift();
                        jQuery("#participants").jqGrid('setSelection',removed);
                    }
                }

                clearRegDetails();
                current_person = showRegDetails(id);
                return current_person;
            } else {
                idx = selected_people.indexOf(id);
                if (idx > -1) {
                    selected_people.splice(idx, 1);
                }
                // clear the reg details if there are no more selections
                if (selected_people.length == 0) {
                    clearRegDetails();
                    current_person = null;
                }
                return null;
            }
        },
        clearDetails : function() {
            clearRegDetails();
        },
        addFilter : function(context, name) {
            if (!filters) {
                filters = new TagFilterCollection();
            }

            if (!filterCol) {
                filterCol = TabUtils.createTabListContent({
                    collection : filters,
                    template : "#participant-filters-template",
                    place : "#participant-filters",
                    collection_attributes : { "class" : "clearfix" },
                    tagremove : function(context, name) {
                        // force a refresh of the table etc
                        ParticipantApp.PeopleManagement.refreshTable();
                    },
                    view_attributes : { "style" : "display : inline" },
                });

            }

            filters.add(
                new TagFilter({
                    context : context,
                    name : name
                })
            );
        },

        getTagQuery : function() {
            var tagQuery = "";

            // go through the filters are create the query for the tags ...
            if (filters) {
                // convert the filters into an associative array and then build the query...
                var filterArray = {}
                _.each(filters, function(el, index, list) {
                    var ctx = filters.at(index).get('context');
                    if (!filterArray[ctx]) {
                        filterArray[ctx] = filters.at(index).get('name');
                    } else {
                        filterArray[ctx] += ',' + filters.at(index).get('name');
                    };
                });
                var str = "";
                var index = 0;
                _.each(filterArray, function(val, key, list) {
                    if (index > 0) {
                        str += "&";
                    };
                    str += "context[" + index + "]=" + key + "&tags[" + index + "]=" + encodeURIComponent(val);
                    index += 1;
                });
                tagQuery = str;
            }

            return tagQuery;
        },

        refreshTable : function() {
            // get the tags etc from the view and create the query
            var tagQuery = ParticipantApp.PeopleManagement.getTagQuery();
            jQuery("#participants").participantTable('tagQuery',{
                tagQuery : tagQuery
            });
        },

        showEmail : function(row, data) {
            modal = new AppUtils.InfoModal({
                            content : data.content,
                            title : '<%= t "email" %>'
                    });
            modal.render();
        }
    };
})(Backbone);

/*
 *
 */
jQuery(document).ready(function() {
    ParticipantApp.addInitializer(ParticipantApp.PeopleManagement.init);
    ParticipantApp.start();
});
</script>


<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>

