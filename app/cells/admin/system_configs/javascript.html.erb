<script type="text/javascript">

ConfigApp = new Backbone.Marionette.Application();

ConfigApp.ConfigManagement = (function(Backbone){
    TitleMdl =  Backbone.Model.extend({});
    
    EmailConfig = Backbone.Model.extend({
        schema : {
            info                  : { type : 'Text', 
                                      title : '<%= t "config-info-email" %>',
                                      hint: "<%= (t "config-info-email-hint").html_safe %>",
                                    },  
            receive_notifications : { type : 'Checkbox', 
                                      title : '<%= t "config-email-notifications" %>',
                                      hint: "<%= (t "config-email-notifications-hint").html_safe %>",
                                    },
            from                  : { type : 'Text', 
                                      editorAttrs: {
                                        disabled: "true",
                                      },
                                     title : '<%= t "from-email" %>',
                                     hint: "<%= (t "from-email-hint").html_safe %>",
                                    },
            reply_to              : { type : 'Text', 
                                      title : '<%= t "config-reply-to-email" %>',
                                      hint: "<%= (t "reply-to-email-hint").html_safe %>",
                                    },
            cc                    : { type : 'Text', 
                                      title : '<%= t "config-cc-email" %>',
                                      hint: "<%= (t "cc-email-hint").html_safe %>",
                                    },
            test_email            : { type : 'Text', 
                                      title : '<%= t "config-test-email" %>',
                                      hint: "<%= (t "test-email-hint").html_safe %>",
                                    }
            
        },
        urlRoot : "<%= baseUri + '/mail_configs' %>"
    });

    CloudinaryConfig = Backbone.Model.extend({
        schema : {
            api_key                 : { type : 'Text', title : '<%= t "config-cloudinary-api-key" %>' },
            api_secret              : { type : 'Text', title : '<%= t "config-cloudinary-api-secret" %>' },
            cloud_name              : { type : 'Text', title : '<%= t "config-cloudinary-cloud-name" %>' },
            enhance_image_tag       : { type : 'Checkbox', title : '<%= t "config-cloudinary-enhance-image-tag" %>' },
            static_image_support    : { type : 'Checkbox', title : '<%= t "config-cloudinary-static-image-support" %>' }
        },
        urlRoot : "<%= baseUri + '/cloudinary_config' %>"
    });

    ItemFormat = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "format-name" %>' },
            position : { type : 'Number', title : '<%= t "format-position" %>' }
        },
        urlRoot : "<%= baseUri + '/formats' %>"
    });
    
    ItemFormatCollection = Backbone.Collection.extend({
        model : ItemFormat
    });
    
    RoomSetup = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "room-setup-name" %>' },
        },
        urlRoot : "<%= baseUri + '/setup_types' %>"
    });
    
    RoomSetupCollection = Backbone.Collection.extend({
        model : RoomSetup
    });
    
    DataSource = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "data-source-name" %>' },
            primary  : { type : 'Checkbox', title : '<%= t "primary" %>' },
        },
        urlRoot : "<%= baseUri + '/datasources' %>"
    });
    
    DataSourceCollection = Backbone.Collection.extend({
        model : DataSource
    });
    
    ConfigLayout = Backbone.Marionette.Layout.extend({
        template: "#config-list-layout-template",
        
        regions : {
            titleRegion     : "#config-title-div",
            controlRegion   : "#config-control-div",
            configRegion    : "#config-region-div",
        },
    });
    
    TitleView = Backbone.Marionette.ItemView.extend({
        template: '#config-title-template'
    });
    
    UsersView = Backbone.Marionette.ItemView.extend({
        template: '#config-users-template'
    });
    
    var configRegion = new Backbone.Marionette.Region({
        el: "#config-area"
    });


    var tabLists = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' );
    };

    var Workspace = Backbone.Router.extend({
        routes : {
            'users_config' : 'users_config',
            'item_format_config' : 'item_format_config',
            'room_setups_config' : 'room_setups_config',
            'data_sources_config' : 'data_sources_config',
            'email_config' : 'email_config',
            'cloudinary_config' : 'cloudinary_config'
        },

        users_config : function() {
            configRegion.close();
            
            layout = new ConfigLayout();
            configRegion.show(layout);
            layout.configRegion.show ( new UsersView() );
        },
        
        item_format_config : function() {
            configRegion.close();
            
            itemFormatLayout = new ConfigLayout();
            configRegion.show(itemFormatLayout);
            itemFormatLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-item-formats" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#item-format-control-template",
                modelType               : ItemFormat,
                view_refresh_event      : "item_format:refresh",
                modal_create_title      : '<%= t "create-item-format" %>',
                region                  : itemFormatLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "<%= baseUri + '/formats.json' %>",
                collectionType          : ItemFormatCollection,
                region                  : itemFormatLayout.configRegion,
                template                : "#item-format-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "item_format:refresh",
                modal_edit_title        : '<%= t "edit-item-format" %>',
                modal_edit              : true
            }) );
        },
        
        room_setups_config : function() {
            configRegion.close();
            
            setupLayout = new ConfigLayout();
            configRegion.show(setupLayout);
            setupLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-room-setups" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#room-setup-control-template",
                modelType               : RoomSetup,
                view_refresh_event      : "room_setup:refresh",
                modal_create_title      : '<%= t "create-room-setup" %>',
                region                  : setupLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "<%= baseUri + '/setup_types.json' %>",
                collectionType          : RoomSetupCollection,
                region                  : setupLayout.configRegion,
                template                : "#room-setup-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "room_setup:refresh",
                modal_edit_title        : '<%= t "edit-room-setup" %>',
                modal_edit              : true
            }) );
        },
        
        data_sources_config : function() {
            configRegion.close();
            
            dataSourceLayout = new ConfigLayout();
            configRegion.show(dataSourceLayout);
            dataSourceLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "data-sources" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#data-source-control-template",
                modelType               : DataSource,
                view_refresh_event      : "data_source:refresh",
                modal_create_title      : '<%= t "create-data-source" %>',
                region                  : dataSourceLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "<%= baseUri + '/datasources.json' %>",
                collectionType          : DataSourceCollection,
                region                  : dataSourceLayout.configRegion,
                template                : "#data-source-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "data_source:refresh",
                modal_edit_title        : '<%= t "edit-data-source" %>',
                modal_edit              : true
            }) );
        },
        
        email_config : function() {
            configRegion.close(); 
            configLayout = new ConfigLayout();
            configRegion.show(configLayout);
            
            var config = new EmailConfig();
            config.fetch({
                success : function(mdl) {
                    
                    var view = AppUtils.createEditItemView({
                        model           : mdl,
                        itemArea        : "#config-control-div",
                        readTemplate    : '#email-config-view-template',
                    });
                }
            });
        },
        
        cloudinary_config : function() {
            configRegion.close();
            configLayout = new ConfigLayout();
            configRegion.show(configLayout);
            
            var config = new CloudinaryConfig();
            config.fetch({
                success : function(mdl) {
                    var view = AppUtils.createEditItemView({
                        model           : mdl,
                        itemArea        : "#config-control-div",
                        readTemplate    : '#cloudinary-config-view-template'
                    });
                }
            });

        }
    });

    /*
     * 
     */
    return {
        configRegion : configRegion,
        ConfigLayout : ConfigLayout,
         
        init : function(options) {
            new Workspace();
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ConfigApp.addInitializer(ConfigApp.ConfigManagement.init);
    ConfigApp.start({});
});

</script>

<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>

<%= render_cell "admin/users", :javascript %>
